{"version":3,"file":"dicomweb-client.js","sources":["../src/message.js","../src/api.js","../src/utils.js","../src/version.js","../src/dicomweb-client.js"],"sourcesContent":["/**\r\n * Converts a Uint8Array to a String.\r\n * @param {Uint8Array} array that should be converted\r\n * @param {Number} offset array offset in case only subset of array items should\r\n                   be extracted (default: 0)\r\n * @param {Number} limit maximum number of array items that should be extracted\r\n                   (defaults to length of array)\r\n * @returns {String}\r\n */\r\nfunction uint8ArrayToString(arr, offset = 0, limit) {\r\n  const itemLimit = limit || arr.length - offset;\r\n  let str = '';\r\n  for (let i = offset; i < offset + itemLimit; i++) {\r\n    str += String.fromCharCode(arr[i]);\r\n  }\r\n  return str;\r\n}\r\n\r\n/**\r\n * Converts a String to a Uint8Array.\r\n * @param {String} str string that should be converted\r\n * @returns {Uint8Array}\r\n */\r\nfunction stringToUint8Array(str) {\r\n  const arr = new Uint8Array(str.length);\r\n  for (let i = 0, j = str.length; i < j; i++) {\r\n    arr[i] = str.charCodeAt(i);\r\n  }\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Identifies the boundary in a multipart/related message header.\r\n * @param {String} header message header\r\n * @returns {String} boundary\r\n */\r\nfunction identifyBoundary(header) {\r\n  const parts = header.split('\\r\\n');\r\n\r\n  for (let i = 0; i < parts.length; i++) {\r\n    if (parts[i].substr(0, 2) === '--') {\r\n      return parts[i];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Checks whether a given token is contained by a message at a given offset.\r\n * @param {Uint8Array} message message content\r\n * @param {Uint8Array} token substring that should be present\r\n * @param {Number} offset offset in message content from where search should start\r\n * @returns {Boolean} whether message contains token at offset\r\n */\r\nfunction containsToken(message, token, offset = 0) {\r\n  if (offset + token.length > message.length) {\r\n    return false;\r\n  }\r\n\r\n  let index = offset;\r\n  for (let i = 0; i < token.length; i++) {\r\n    if (token[i] !== message[index]) {\r\n      return false;\r\n    }\r\n\r\n    index += 1;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Finds a given token in a message at a given offset.\r\n * @param {Uint8Array} message message content\r\n * @param {Uint8Array} token substring that should be found\r\n * @param {String} offset message body offset from where search should start\r\n * @returns {Boolean} whether message has a part at given offset or not\r\n */\r\nfunction findToken(message, token, offset = 0, maxSearchLength) {\r\n  let searchLength = message.length;\r\n  if (maxSearchLength) {\r\n    searchLength = Math.min(offset + maxSearchLength, message.length);\r\n  }\r\n\r\n  for (let i = offset; i < searchLength; i++) {\r\n    // If the first value of the message matches\r\n    // the first value of the token, check if\r\n    // this is the full token.\r\n    if (message[i] === token[0]) {\r\n      if (containsToken(message, token, i)) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\n/**\r\n * Create a random GUID\r\n *\r\n * @return {string}\r\n */\r\nfunction guid() {\r\n  function s4() {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n      .toString(16)\r\n      .substring(1);\r\n  }\r\n  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\r\n}\r\n\r\n/**\r\n * @typedef {Object} MultipartEncodedData\r\n * @property {ArrayBuffer} data The encoded Multipart Data\r\n * @property {String} boundary The boundary used to divide pieces of the encoded data\r\n */\r\n\r\n/**\r\n * Encode one or more DICOM datasets into a single body so it can be\r\n * sent using the Multipart Content-Type.\r\n *\r\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the\r\n                          multipart body, passed as ArrayBuffers.\r\n * @param {String} [boundary] Optional string to define a boundary between each part\r\n                              of the multipart body. If this is not specified, a random\r\n                              GUID will be generated.\r\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This\r\n                                  contains both the data itself, and the boundary string\r\n                                  used to divide it.\r\n */\r\nfunction multipartEncode(\r\n  datasets,\r\n  boundary = guid(),\r\n  contentType = 'application/dicom',\r\n) {\r\n  const contentTypeString = `Content-Type: ${contentType}`;\r\n  const header = `\\r\\n--${boundary}\\r\\n${contentTypeString}\\r\\n\\r\\n`;\r\n  const footer = `\\r\\n--${boundary}--`;\r\n  const headerArray = stringToUint8Array(header);\r\n  const footerArray = stringToUint8Array(footer);\r\n  const headerLength = headerArray.length;\r\n  const footerLength = footerArray.length;\r\n\r\n  let length = 0;\r\n\r\n  // Calculate the total length for the final array\r\n  const contentArrays = datasets.map(datasetBuffer => {\r\n    const contentArray = new Uint8Array(datasetBuffer);\r\n    const contentLength = contentArray.length;\r\n\r\n    length += headerLength + contentLength;\r\n\r\n    return contentArray;\r\n  });\r\n\r\n  length += footerLength;\r\n\r\n  // Allocate the array\r\n  const multipartArray = new Uint8Array(length);\r\n\r\n  // Set the initial header\r\n  multipartArray.set(headerArray, 0);\r\n\r\n  // Write each dataset into the multipart array\r\n  let position = 0;\r\n  contentArrays.forEach(contentArray => {\r\n    multipartArray.set(headerArray, position);\r\n    multipartArray.set(contentArray, position + headerLength);\r\n\r\n    position += headerLength + contentArray.length;\r\n  });\r\n\r\n  multipartArray.set(footerArray, position);\r\n\r\n  return {\r\n    data: multipartArray.buffer,\r\n    boundary,\r\n  };\r\n}\r\n\r\n/**\r\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\r\n *\r\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\r\n * @returns {Array} The content\r\n */\r\nfunction multipartDecode(response) {\r\n  // Use the raw data if it is provided in an appropriate format\r\n  const message = ArrayBuffer.isView(response) ? response : new Uint8Array(response);\r\n\r\n  /* Set a maximum length to search for the header boundaries, otherwise\r\n       findToken can run for a long time\r\n    */\r\n  const maxSearchLength = 1000;\r\n\r\n  // First look for the multipart mime header\r\n  const separator = stringToUint8Array('\\r\\n\\r\\n');\r\n  const headerIndex = findToken(message, separator, 0, maxSearchLength);\r\n  if (headerIndex === -1) {\r\n    throw new Error('Response message has no multipart mime header');\r\n  }\r\n\r\n  const header = uint8ArrayToString(message, 0, headerIndex);\r\n  const boundaryString = identifyBoundary(header);\r\n  if (!boundaryString) {\r\n    throw new Error('Header of response message does not specify boundary');\r\n  }\r\n\r\n  const boundary = stringToUint8Array(boundaryString);\r\n  const boundaryLength = boundary.length;\r\n  const components = [];\r\n\r\n  let offset = boundaryLength;\r\n\r\n  // Loop until we cannot find any more boundaries\r\n  let boundaryIndex;\r\n\r\n  while (boundaryIndex !== -1) {\r\n    // Search for the next boundary in the message, starting\r\n    // from the current offset position\r\n    boundaryIndex = findToken(message, boundary, offset);\r\n\r\n    // If no further boundaries are found, stop here.\r\n    if (boundaryIndex === -1) {\r\n      break;\r\n    }\r\n\r\n    const headerTokenIndex = findToken(\r\n      message,\r\n      separator,\r\n      offset,\r\n      maxSearchLength,\r\n    );\r\n    if (headerTokenIndex === -1) {\r\n      throw new Error('Response message part has no mime header');\r\n    }\r\n    offset = headerTokenIndex + separator.length;\r\n\r\n    // Extract data from response message, excluding \"\\r\\n\"\r\n    const spacingLength = 2;\r\n    const data = response.slice(offset, boundaryIndex - spacingLength);\r\n\r\n    // Add the data to the array of results\r\n    components.push(data);\r\n\r\n    // Move the offset to the end of the current section,\r\n    // plus the identified boundary\r\n    offset = boundaryIndex + boundaryLength;\r\n  }\r\n\r\n  return components;\r\n}\r\n\r\nexport {\r\n  containsToken,\r\n  findToken,\r\n  identifyBoundary,\r\n  uint8ArrayToString,\r\n  stringToUint8Array,\r\n  multipartEncode,\r\n  multipartDecode,\r\n  guid,\r\n};\r\n","import { multipartEncode, multipartDecode } from './message.js';\r\n\r\nfunction isObject(obj) {\r\n  return typeof obj === 'object' && obj !== null;\r\n}\r\n\r\nfunction isEmptyObject(obj) {\r\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\r\n}\r\n\r\nfunction areValidRequestHooks(requestHooks) {\r\n  const isValid =\r\n    Array.isArray(requestHooks) &&\r\n    requestHooks.every(\r\n      requestHook =>\r\n        typeof requestHook === 'function' && requestHook.length === 2,\r\n    );\r\n\r\n  if (!isValid) {\r\n    console.warn(\r\n      'Request hooks should have the following signature: ' +\r\n        'function requestHook(request, metadata) { return request; }',\r\n    );\r\n  }\r\n\r\n  return isValid;\r\n}\r\n\r\nconst getFirstResult = result => result[0];\r\n\r\nconst MEDIATYPES = {\r\n  DICOM: 'application/dicom',\r\n  DICOM_JSON: 'application/dicom+json',\r\n  OCTET_STREAM: 'application/octet-stream',\r\n  PDF: 'application/pdf',\r\n  JPEG: 'image/jpeg',\r\n  PNG: 'image/png',\r\n};\r\n\r\n/**\r\n * debugLog is a function that can be called with console.log arguments, and will\r\n * be conditionally displayed, only when debug logging is enabled.\r\n */\r\nlet debugLog = () => {};\r\n\r\n/**\r\n * @typedef { import(\"../types/types\").InstanceMetadata } InstanceMetadata\r\n */\r\n\r\n/**\r\n * A callback with the request instance and metadata information\r\n * of the currently request being executed that should necessarily\r\n * return the given request optionally modified.\r\n * @typedef {function} RequestHook\r\n * @param {XMLHttpRequest} request - The original XMLHttpRequest instance.\r\n * @param {object} metadata - The metadata used by the request.\r\n */\r\n\r\n/**\r\n * Class for interacting with DICOMweb RESTful services.\r\n */\r\nclass DICOMwebClient {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} options\r\n   * @param {String} options.url - URL of the DICOMweb RESTful Service endpoint\r\n   * @param {String=} options.qidoURLPrefix - URL path prefix for QIDO-RS\r\n   * @param {String=} options.wadoURLPrefix - URL path prefix for WADO-RS\r\n   * @param {String=} options.stowURLPrefix - URL path prefix for STOW-RS\r\n   * @param {String=} options.username - Username\r\n   * @param {String=} options.password - Password\r\n   * @param {Object=} options.headers - HTTP headers\r\n   * @param {Array.<RequestHook>=} options.requestHooks - Request hooks.\r\n   * @param {Object=} options.verbose - print to console request warnings and errors, default true\r\n   * @param {Object=} options.debug - print to the console debug level information/status updates.\r\n   * @param {boolean|String} options.singlepart - retrieve singlepart for the named types.\r\n   * The available types are:  bulkdata, video, image.  true means all.\r\n   */\r\n  constructor(options) {\r\n    this.baseURL = options.url;\r\n    if (!this.baseURL) {\r\n      console.error('no DICOMweb base url provided - calls that require a URL will fail');\r\n    }\r\n\r\n    if ('username' in options) {\r\n      this.username = options.username;\r\n      if (!('password' in options)) {\r\n        console.error(\r\n          'no password provided to authenticate with DICOMweb service',\r\n        );\r\n      }\r\n      this.password = options.password;\r\n    }\r\n\r\n    if ('qidoURLPrefix' in options) {\r\n      debugLog(`use URL prefix for QIDO-RS: ${options.qidoURLPrefix}`);\r\n      this.qidoURL = `${this.baseURL}/${options.qidoURLPrefix}`;\r\n    } else {\r\n      this.qidoURL = this.baseURL;\r\n    }\r\n\r\n    if ('wadoURLPrefix' in options) {\r\n      debugLog(`use URL prefix for WADO-RS: ${options.wadoURLPrefix}`);\r\n      this.wadoURL = `${this.baseURL}/${options.wadoURLPrefix}`;\r\n    } else {\r\n      this.wadoURL = this.baseURL;\r\n    }\r\n\r\n    if ('stowURLPrefix' in options) {\r\n      debugLog(`use URL prefix for STOW-RS: ${options.stowURLPrefix}`);\r\n      this.stowURL = `${this.baseURL}/${options.stowURLPrefix}`;\r\n    } else {\r\n      this.stowURL = this.baseURL;\r\n    }\r\n\r\n    if (options.singlepart) {\r\n      debugLog('use singlepart', options.singlepart);\r\n      this.singlepart = options.singlepart === true ? 'bulkdata,video,image' : options.singlepart;\r\n    } else {\r\n      this.singlepart = '';\r\n    }\r\n\r\n    if ('requestHooks' in options) {\r\n      this.requestHooks = options.requestHooks;\r\n    }\r\n\r\n    // Headers to pass to requests.\r\n    this.headers = options.headers || {};\r\n\r\n    // Optional error interceptor callback to handle any failed request.\r\n    this.errorInterceptor = options.errorInterceptor || (() => undefined);\r\n\r\n    // Verbose - print to console request warnings and errors, default true\r\n    this.verbose = options.verbose !== false;\r\n\r\n    this.setDebug(options.debug);\r\n \r\n\r\n  }\r\n\r\n  /**\r\n   * Allows setting the debug log information. \r\n   * Note this is different from verbose in that verbose is whether to include warning/error information, defaulting to true\r\n   * \r\n   * @param {boolean} debugLevel \r\n   * @param {function} debugLogFunction to call with the debug output arguments. \r\n   */\r\n  setDebug(debugLevel = false, debugLogFunction = null) {\r\n    this.debugLevel = !!debugLevel;\r\n    debugLog = debugLogFunction || debugLevel ? console.log : () => {};\r\n  }\r\n\r\n  /**\r\n   * Gets debug flag\r\n   * \r\n   * @returns true if debug logging is enabled\r\n   */\r\n  getDebug() {\r\n    return this.debugLevel;\r\n  }\r\n \r\n  /**\r\n   * Sets verbose flag.\r\n   *\r\n   * @param {Boolean} verbose\r\n   */\r\n  setVerbose(verbose) {\r\n    this.verbose = verbose;\r\n  }\r\n\r\n  /**\r\n   * Gets verbose flag.\r\n   *\r\n   * @return {Boolean} verbose\r\n   */\r\n  getVerbose() {\r\n    return this.verbose;\r\n  }\r\n\r\n  static _parseQueryParameters(params = {}) {\r\n    let queryString = '?';\r\n    Object.keys(params).forEach((key, index) => {\r\n      if (index !== 0) {\r\n        queryString += '&';\r\n      }\r\n      queryString += `${key}=${encodeURIComponent(params[key])}`;\r\n    });\r\n    return queryString;\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP request.\r\n   *\r\n   * @param {String} url\r\n   * @param {String} method\r\n   * @param {Object} headers\r\n   * @param {Object} options\r\n   * @param {Array.<RequestHook>} options.requestHooks - Request hooks.\r\n   * @param {XMLHttpRequest} [options.request] - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  _httpRequest(url, method, headers = {}, options = {}) {\r\n    const { errorInterceptor, requestHooks } = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let request = options.request ? options.request : new XMLHttpRequest();\r\n\r\n      request.open(method, url, true);\r\n      if ('responseType' in options) {\r\n        request.responseType = options.responseType;\r\n      }\r\n\r\n      if (typeof headers === 'object') {\r\n        Object.keys(headers).forEach(key => {\r\n          request.setRequestHeader(key, headers[key]);\r\n        });\r\n      }\r\n\r\n      // now add custom headers from the user\r\n      // (e.g. access tokens)\r\n      const userHeaders = this.headers;\r\n      Object.keys(userHeaders).forEach(key => {\r\n        request.setRequestHeader(key, userHeaders[key]);\r\n      });\r\n\r\n      // Event triggered when upload starts\r\n      request.onloadstart = function onloadstart() {\r\n        debugLog('upload started: ', url)\r\n      };\r\n\r\n      // Event triggered when upload ends\r\n      request.onloadend = function onloadend() {\r\n        debugLog('upload finished')\r\n      };\r\n\r\n      // Handle response message\r\n      request.onreadystatechange = () => {\r\n        if (request.readyState === 4) {\r\n          if (request.status === 200) {\r\n            const contentType = request.getResponseHeader('Content-Type');\r\n            // Automatically distinguishes between multipart and singlepart in an array buffer, and\r\n            // converts them into a consistent type.\r\n            if (contentType && contentType.indexOf('multipart') !== -1) {\r\n              resolve(multipartDecode(request.response));\r\n            } else if (request.responseType === 'arraybuffer') {\r\n              resolve([request.response]);\r\n            } else {\r\n              resolve(request.response);\r\n            }\r\n          } else if (request.status === 202) {\r\n            if (this.verbose) {\r\n              console.warn('some resources already existed: ', request);\r\n            }\r\n            resolve(request.response);\r\n          } else if (request.status === 204) {\r\n            if (this.verbose) {\r\n              console.warn('empty response for request: ', request);\r\n            }\r\n            resolve([]);\r\n          } else {\r\n            const error = new Error('request failed');\r\n            error.request = request;\r\n            error.response = request.response;\r\n            error.status = request.status;\r\n            if (this.verbose) {\r\n              console.error('request failed: ', request);\r\n              console.error(error);\r\n              console.error(error.response);\r\n            }\r\n\r\n            errorInterceptor(error);\r\n\r\n            reject(error);\r\n          }\r\n        }\r\n      };\r\n\r\n      // Event triggered while download progresses\r\n      if ('progressCallback' in options) {\r\n        if (typeof options.progressCallback === 'function') {\r\n          request.onprogress = options.progressCallback;\r\n        }\r\n      }\r\n\r\n      if (requestHooks && areValidRequestHooks(requestHooks)) {\r\n        const combinedHeaders = Object.assign({}, headers, this.headers);\r\n        const metadata = { method, url, headers: combinedHeaders };\r\n        const pipeRequestHooks = functions => args =>\r\n          functions.reduce((props, fn) => fn(props, metadata), args);\r\n        const pipedRequest = pipeRequestHooks(requestHooks);\r\n        request = pipedRequest(request);\r\n      }\r\n\r\n      // Add withCredentials to request if needed\r\n      if ('withCredentials' in options) {\r\n        if (options.withCredentials) {\r\n          request.withCredentials = true;\r\n        }\r\n      }\r\n\r\n      if ('data' in options) {\r\n        request.send(options.data);\r\n      } else {\r\n        request.send();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request.\r\n   *\r\n   * @param {String} url\r\n   * @param {Object} headers\r\n   * @param {Object} responseType\r\n   * @param {Function} progressCallback\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  _httpGet(url, headers, responseType, progressCallback, withCredentials) {\r\n    return this._httpRequest(url, 'get', headers, {\r\n      responseType,\r\n      progressCallback,\r\n      withCredentials,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a message with application/json\r\n   * media type.\r\n   *\r\n   * @param {String} url\r\n   * @param {Object} params\r\n   * @param {Function} progressCallback\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  _httpGetApplicationJson(url, params = {}, progressCallback, withCredentials) {\r\n    let urlWithQueryParams = url;\r\n\r\n    if (typeof params === 'object') {\r\n      if (!isEmptyObject(params)) {\r\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\r\n      }\r\n    }\r\n    const headers = { Accept: MEDIATYPES.DICOM_JSON };\r\n    const responseType = 'json';\r\n    return this._httpGet(\r\n      urlWithQueryParams,\r\n      headers,\r\n      responseType,\r\n      progressCallback,\r\n      withCredentials,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a message with application/pdf\r\n   * media type.\r\n   *\r\n   * @param {String} url\r\n   * @param {Object} params\r\n   * @param {Function} progressCallback\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  _httpGetApplicationPdf(url, params = {}, progressCallback, withCredentials) {\r\n    let urlWithQueryParams = url;\r\n\r\n    if (typeof params === 'object') {\r\n      if (!isEmptyObject(params)) {\r\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\r\n      }\r\n    }\r\n    const headers = { Accept: MEDIATYPES.PDF };\r\n    const responseType = 'json';\r\n    return this._httpGet(\r\n      urlWithQueryParams,\r\n      headers,\r\n      responseType,\r\n      progressCallback,\r\n      withCredentials,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a message with an image\r\n   media type.\r\n   *\r\n   * @param {String} url\r\n   * @param {Object[]} mediaTypes\r\n   * @param {Object} params\r\n   * @param {Function} progressCallback\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  _httpGetImage(\r\n    url,\r\n    mediaTypes,\r\n    params = {},\r\n    progressCallback,\r\n    withCredentials,\r\n  ) {\r\n    let urlWithQueryParams = url;\r\n\r\n    if (typeof params === 'object') {\r\n      if (!isEmptyObject(params)) {\r\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\r\n      }\r\n    }\r\n\r\n    const supportedMediaTypes = [\r\n      'image/',\r\n      'image/*',\r\n      'image/jpeg',\r\n      'image/jp2',\r\n      'image/gif',\r\n      'image/png',\r\n    ];\r\n\r\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\r\n      mediaTypes,\r\n      supportedMediaTypes,\r\n    );\r\n    const headers = { Accept: acceptHeaderFieldValue };\r\n    const responseType = 'arraybuffer';\r\n    return this._httpGet(\r\n      urlWithQueryParams,\r\n      headers,\r\n      responseType,\r\n      progressCallback,\r\n      withCredentials,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a message with a text\r\n   media type.\r\n   *\r\n   * @param {String} url\r\n   * @param {Object[]} mediaTypes\r\n   * @param {Object} params\r\n   * @param {Function} progressCallback\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  _httpGetText(\r\n    url,\r\n    mediaTypes,\r\n    params = {},\r\n    progressCallback,\r\n    withCredentials,\r\n  ) {\r\n    let urlWithQueryParams = url;\r\n\r\n    if (typeof params === 'object') {\r\n      if (!isEmptyObject(params)) {\r\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\r\n      }\r\n    }\r\n\r\n    const supportedMediaTypes = [\r\n      'text/',\r\n      'text/*',\r\n      'text/html',\r\n      'text/plain',\r\n      'text/rtf',\r\n      'text/xml',\r\n    ];\r\n\r\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\r\n      mediaTypes,\r\n      supportedMediaTypes,\r\n    );\r\n    const headers = { Accept: acceptHeaderFieldValue };\r\n    const responseType = 'arraybuffer';\r\n    return this._httpGet(\r\n      urlWithQueryParams,\r\n      headers,\r\n      responseType,\r\n      progressCallback,\r\n      withCredentials,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a message with a video\r\n   media type.\r\n   *\r\n   * @param {String} url\r\n   * @param {Object[]} mediaTypes\r\n   * @param {Object} params\r\n   * @param {Function} progressCallback\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  _httpGetVideo(\r\n    url,\r\n    mediaTypes,\r\n    params = {},\r\n    progressCallback,\r\n    withCredentials,\r\n  ) {\r\n    let urlWithQueryParams = url;\r\n\r\n    if (typeof params === 'object') {\r\n      if (!isEmptyObject(params)) {\r\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\r\n      }\r\n    }\r\n\r\n    const supportedMediaTypes = [\r\n      'video/',\r\n      'video/*',\r\n      'video/mpeg',\r\n      'video/mp4',\r\n      'video/H265',\r\n    ];\r\n\r\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\r\n      mediaTypes,\r\n      supportedMediaTypes,\r\n    );\r\n    const headers = { Accept: acceptHeaderFieldValue };\r\n    const responseType = 'arraybuffer';\r\n    return this._httpGet(\r\n      urlWithQueryParams,\r\n      headers,\r\n      responseType,\r\n      progressCallback,\r\n      withCredentials,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Asserts that a given media type is valid.\r\n   *\r\n   * @params {String} mediaType media type\r\n   */\r\n  static _assertMediaTypeIsValid(mediaType) {\r\n    if (!mediaType) {\r\n      throw new Error(`Not a valid media type: ${mediaType}`);\r\n    }\r\n\r\n    const sepIndex = mediaType.indexOf('/');\r\n    if (sepIndex === -1) {\r\n      throw new Error(`Not a valid media type: ${mediaType}`);\r\n    }\r\n\r\n    const mediaTypeType = mediaType.slice(0, sepIndex);\r\n    const types = ['application', 'image', 'text', 'video'];\r\n    if (!types.includes(mediaTypeType)) {\r\n      throw new Error(`Not a valid media type: ${mediaType}`);\r\n    }\r\n\r\n    if (mediaType.slice(sepIndex + 1).includes('/')) {\r\n      throw new Error(`Not a valid media type: ${mediaType}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a multipart message with an image media type.\r\n   *\r\n   * @param {String} url - Unique resource locator\r\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\r\n   corresponding transfer syntaxes\r\n   * @param {Array} byteRange - Start and end of byte range\r\n   * @param {Object} params - Additional HTTP GET query parameters\r\n   * @param {Boolean} rendered - Whether resource should be requested using rendered media types\r\n   * @param {Function} progressCallback\r\n   * @private\r\n   * @returns {Promise<Array>} Content of HTTP message body parts\r\n   */\r\n  _httpGetMultipartImage(\r\n    url,\r\n    mediaTypes,\r\n    byteRange,\r\n    params,\r\n    rendered = false,\r\n    progressCallback,\r\n    withCredentials,\r\n  ) {\r\n    const headers = {};\r\n    let supportedMediaTypes;\r\n    if (rendered) {\r\n      supportedMediaTypes = [\r\n        'image/jpeg',\r\n        'image/gif',\r\n        'image/png',\r\n        'image/jp2',\r\n      ];\r\n    } else {\r\n      supportedMediaTypes = {\r\n        '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\r\n        '1.2.840.10008.1.2.4.50': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.51': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.57': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.70': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\r\n        '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\r\n        '1.2.840.10008.1.2.4.90': ['image/jp2'],\r\n        '1.2.840.10008.1.2.4.91': ['image/jp2'],\r\n        '1.2.840.10008.1.2.4.92': ['image/jpx'],\r\n        '1.2.840.10008.1.2.4.93': ['image/jpx'],\r\n      };\r\n\r\n      if (byteRange) {\r\n        headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\r\n      }\r\n    }\r\n\r\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\r\n      mediaTypes,\r\n      supportedMediaTypes,\r\n    );\r\n\r\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a multipart message with a video media type.\r\n   *\r\n   * @param {String} url - Unique resource locator\r\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\r\n   corresponding transfer syntaxes\r\n   * @param {Array} byteRange - Start and end of byte range\r\n   * @param {Object} params - Additional HTTP GET query parameters\r\n   * @param {Boolean} rendered - Whether resource should be requested using rendered media types\r\n   * @param {Function} progressCallback\r\n   * @private\r\n   * @returns {Promise<Array>} Content of HTTP message body parts\r\n   */\r\n  _httpGetMultipartVideo(\r\n    url,\r\n    mediaTypes,\r\n    byteRange,\r\n    params,\r\n    rendered = false,\r\n    progressCallback,\r\n    withCredentials,\r\n  ) {\r\n    const headers = {};\r\n    let supportedMediaTypes;\r\n    if (rendered) {\r\n      supportedMediaTypes = [\r\n        'video/',\r\n        'video/*',\r\n        'video/mpeg2',\r\n        'video/mp4',\r\n        'video/H265',\r\n      ];\r\n    } else {\r\n      supportedMediaTypes = {\r\n        '1.2.840.10008.1.2.4.100': ['video/mpeg2'],\r\n        '1.2.840.10008.1.2.4.101': ['video/mpeg2'],\r\n        '1.2.840.10008.1.2.4.102': ['video/mp4'],\r\n        '1.2.840.10008.1.2.4.103': ['video/mp4'],\r\n        '1.2.840.10008.1.2.4.104': ['video/mp4'],\r\n        '1.2.840.10008.1.2.4.105': ['video/mp4'],\r\n        '1.2.840.10008.1.2.4.106': ['video/mp4'],\r\n      };\r\n\r\n      if (byteRange) {\r\n        headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\r\n      }\r\n    }\r\n\r\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\r\n      mediaTypes,\r\n      supportedMediaTypes,\r\n    );\r\n\r\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a multipart message\r\n   * with a application/dicom media type.\r\n   *\r\n   * @param {String} url - Unique resource locator\r\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\r\n   corresponding transfer syntaxes\r\n   * @param {Object} params - Additional HTTP GET query parameters\r\n   * @param {Function} progressCallback\r\n   * @private\r\n   * @returns {Promise<Array>} Content of HTTP message body parts\r\n   */\r\n  _httpGetMultipartApplicationDicom(\r\n    url,\r\n    mediaTypes,\r\n    params,\r\n    progressCallback,\r\n    withCredentials,\r\n  ) {\r\n    const headers = {};\r\n    const defaultMediaType = 'application/dicom';\r\n    const supportedMediaTypes = {\r\n      '1.2.840.10008.1.2.1': [defaultMediaType],\r\n      '1.2.840.10008.1.2.5': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.50': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.51': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.57': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.70': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.80': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.81': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.90': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.91': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.92': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.93': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.100': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.101': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.102': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.103': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.104': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.105': [defaultMediaType],\r\n      '1.2.840.10008.1.2.4.106': [defaultMediaType],\r\n    };\r\n\r\n    let acceptableMediaTypes = mediaTypes;\r\n    if (!mediaTypes) {\r\n      acceptableMediaTypes = [{ mediaType: defaultMediaType }];\r\n    }\r\n\r\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\r\n      acceptableMediaTypes,\r\n      supportedMediaTypes,\r\n    );\r\n\r\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request that accepts a multipart message\r\n   * with a application/octet-stream, OR any of the equivalencies for that (eg\r\n   * application/pdf etc)\r\n   *\r\n   * @param {String} url - Unique resource locator\r\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\r\n   corresponding transfer syntaxes\r\n   * @param {Array} byteRange start and end of byte range\r\n   * @param {Object} params - Additional HTTP GET query parameters\r\n   * @param {Function} progressCallback\r\n   * @private\r\n   * @returns {Promise<Array>} Content of HTTP message body parts\r\n   */\r\n  _httpGetMultipartApplicationOctetStream(\r\n    url,\r\n    mediaTypes,\r\n    byteRange,\r\n    params,\r\n    progressCallback,\r\n    withCredentials,\r\n  ) {\r\n    const headers = {};\r\n    const defaultMediaType = 'application/octet-stream';\r\n    const supportedMediaTypes = {\r\n      '1.2.840.10008.1.2.1': [...Object.values(MEDIATYPES)],\r\n    };\r\n\r\n    let acceptableMediaTypes = mediaTypes;\r\n    if (!mediaTypes) {\r\n      acceptableMediaTypes = [{ mediaType: defaultMediaType }];\r\n    }\r\n\r\n    if (byteRange) {\r\n      headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\r\n    }\r\n\r\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\r\n      acceptableMediaTypes,\r\n      supportedMediaTypes,\r\n    );\r\n\r\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP POST request.\r\n   *\r\n   * @param {String} url - Unique resource locator\r\n   * @param {Object} headers - HTTP header fields\r\n   * @param {Array} data - Data that should be stored\r\n   * @param {Function} progressCallback\r\n   * @param {Function} progressCallback\r\n   * @param {XMLHttpRequest} request - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\r\n   * @private\r\n   * @returns {Promise} Response\r\n   */\r\n  _httpPost(url, headers, data, progressCallback, withCredentials, request) {\r\n    return this._httpRequest(url, 'post', headers, {\r\n      data,\r\n      progressCallback,\r\n      withCredentials,\r\n      request,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP POST request with content-type application/dicom+json.\r\n   *\r\n   * @param {String} url - Unique resource locator\r\n   * @param {Object} headers - HTTP header fields\r\n   * @param {Array} data - Data that should be stored\r\n   * @param {Function} progressCallback\r\n   * @private\r\n   * @returns {Promise} Response\r\n   */\r\n  _httpPostApplicationJson(url, data, progressCallback, withCredentials) {\r\n    const headers = { 'Content-Type': MEDIATYPES.DICOM_JSON };\r\n    return this._httpPost(\r\n      url,\r\n      headers,\r\n      data,\r\n      progressCallback,\r\n      withCredentials,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Parses media type and extracts its type and subtype.\r\n   *\r\n   * @param {String} mediaType - HTTP media type (e.g. image/jpeg)\r\n   * @private\r\n   * @returns {String[]} Media type and subtype\r\n   */\r\n  static _parseMediaType(mediaType) {\r\n    DICOMwebClient._assertMediaTypeIsValid(mediaType);\r\n\r\n    return mediaType.split('/');\r\n  }\r\n\r\n  /**\r\n   * Builds an accept header field value for HTTP GET request messages.\r\n   *\r\n   * @param {Object[]} mediaTypes - Acceptable media types\r\n   * @param {Object[]} supportedMediaTypes - Supported media types\r\n   * @return {*}\r\n   * @private\r\n   */\r\n  static _buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes) {\r\n    if (!Array.isArray(mediaTypes)) {\r\n      throw new Error('Acceptable media types must be provided as an Array');\r\n    }\r\n\r\n    const fieldValueParts = mediaTypes.map(item => {\r\n      const { mediaType } = item;\r\n\r\n      DICOMwebClient._assertMediaTypeIsValid(mediaType);\r\n      if (!supportedMediaTypes.includes(mediaType)) {\r\n        throw new Error(\r\n          `Media type ${mediaType} is not supported for requested resource`,\r\n        );\r\n      }\r\n\r\n      return mediaType;\r\n    });\r\n\r\n    return fieldValueParts.join(', ');\r\n  }\r\n\r\n  /**\r\n   * Builds an accept header field value for HTTP GET multipart request\r\n   * messages.  Will throw an exception if no media types are found which are acceptable,\r\n   * but will only log a verbose level message when types are specified which are\r\n   * not acceptable.  This allows requesting several types with having to know\r\n   * whether they are all acceptable or not.\r\n   *\r\n   * @param {Object[]} mediaTypes - Acceptable media types\r\n   * @param {Object[]} supportedMediaTypes - Supported media types\r\n   * @private\r\n   */\r\n  static _buildMultipartAcceptHeaderFieldValue(\r\n    mediaTypes,\r\n    supportedMediaTypes,\r\n  ) {\r\n    if (!Array.isArray(mediaTypes)) {\r\n      throw new Error('Acceptable media types must be provided as an Array');\r\n    }\r\n\r\n    if (!Array.isArray(supportedMediaTypes) && !isObject(supportedMediaTypes)) {\r\n      throw new Error(\r\n        'Supported media types must be provided as an Array or an Object',\r\n      );\r\n    }\r\n\r\n    const fieldValueParts = [];\r\n\r\n    mediaTypes.forEach(item => {\r\n      const { transferSyntaxUID, mediaType } = item;\r\n      DICOMwebClient._assertMediaTypeIsValid(mediaType);\r\n      let fieldValue = `multipart/related; type=\"${mediaType}\"`;\r\n\r\n      if (isObject(supportedMediaTypes)) {\r\n        // SupportedMediaTypes is a lookup table that maps Transfer Syntax UID\r\n        // to one or more Media Types\r\n        if (\r\n          !Object.values(supportedMediaTypes)\r\n            .flat(1)\r\n            .includes(mediaType)\r\n        ) {\r\n          if (!mediaType.endsWith('/*') || !mediaType.endsWith('/')) {\r\n            debugLog(\r\n              `Media type ${mediaType} is not supported for requested resource`,\r\n            );\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (transferSyntaxUID) {\r\n          if (transferSyntaxUID !== '*') {\r\n            if (!Object.keys(supportedMediaTypes).includes(transferSyntaxUID)) {\r\n              throw new Error(\r\n                `Transfer syntax ${transferSyntaxUID} is not supported for requested resource`,\r\n              );\r\n            }\r\n\r\n            const expectedMediaTypes = supportedMediaTypes[transferSyntaxUID];\r\n\r\n            if (!expectedMediaTypes.includes(mediaType)) {\r\n              const actualType = DICOMwebClient._parseMediaType(mediaType)[0];\r\n              expectedMediaTypes.map(expectedMediaType => {\r\n                const expectedType = DICOMwebClient._parseMediaType(\r\n                  expectedMediaType,\r\n                )[0];\r\n                const haveSameType = actualType === expectedType;\r\n\r\n                if (\r\n                  haveSameType &&\r\n                  (mediaType.endsWith('/*') || mediaType.endsWith('/'))\r\n                ) {\r\n                  return;\r\n                }\r\n\r\n                throw new Error(\r\n                  `Transfer syntax ${transferSyntaxUID} is not supported for requested resource`,\r\n                );\r\n              });\r\n            }\r\n          }\r\n\r\n          fieldValue += `; transfer-syntax=${transferSyntaxUID}`;\r\n        }\r\n      } else if (\r\n        Array.isArray(supportedMediaTypes) &&\r\n        !supportedMediaTypes.includes(mediaType)\r\n      ) {\r\n        if( this.verbose ) {\r\n          console.warn(\r\n            `Media type ${mediaType} is not supported for requested resource`,\r\n          );\r\n        }\r\n        return;\r\n      }\r\n\r\n      fieldValueParts.push(fieldValue);\r\n    });\r\n\r\n    if( !fieldValueParts.length ) {\r\n      throw new Error(`No acceptable media types found among ${JSON.stringify(mediaTypes)}`);\r\n    }\r\n\r\n    return fieldValueParts.join(', ');\r\n  }\r\n\r\n  /**\r\n   * Builds a range header field value for HTTP GET request messages.\r\n   *\r\n   * @param {Array} byteRange - Start and end of byte range\r\n   * @returns {String} Range header field value\r\n   * @private\r\n   */\r\n  static _buildRangeHeaderFieldValue(byteRange = []) {\r\n    if (byteRange.length === 1) {\r\n      return `bytes=${byteRange[0]}-`;\r\n    }\r\n    if (byteRange.length === 2) {\r\n      return `bytes=${byteRange[0]}-${byteRange[1]}`;\r\n    }\r\n\r\n    return 'bytes=0-';\r\n  }\r\n\r\n  /**\r\n   * Gets types that are shared among acceptable media types.\r\n   *\r\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\r\n   corresponding transfer syntaxes\r\n   * @private\r\n   * @returns {String[]} Types that are shared among acceptable media types\r\n   */\r\n  static _getSharedMediaTypes(mediaTypes) {\r\n    const types = new Set();\r\n\r\n    if (!mediaTypes || !mediaTypes.length) {\r\n      return types;\r\n    }\r\n\r\n    mediaTypes.forEach(item => {\r\n      const { mediaType } = item;\r\n      const type = DICOMwebClient._parseMediaType(mediaType)[0];\r\n      types.add(`${type}/`);\r\n    });\r\n\r\n    return Array.from(types);\r\n  }\r\n\r\n  /**\r\n   * Gets common base type of acceptable media types and asserts that only\r\n   one type is specified. For example, ``(\"image/jpeg\", \"image/jp2\")``\r\n   will pass, but ``(\"image/jpeg\", \"video/mpeg2\")`` will raise an\r\n   exception.\r\n   *\r\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\r\n   corresponding transfer syntaxes\r\n   * @private\r\n   * @returns {String[]} Common media type, eg `image/` for the above example.\r\n   */\r\n  static _getCommonMediaType(mediaTypes) {\r\n    if (!mediaTypes || !mediaTypes.length) {\r\n      throw new Error('No acceptable media types provided');\r\n    }\r\n\r\n    const sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\r\n    if (sharedMediaTypes.length === 0) {\r\n      throw new Error('No common acceptable media type could be identified.');\r\n    } else if (sharedMediaTypes.length > 1) {\r\n      throw new Error('Acceptable media types must have the same type.');\r\n    }\r\n\r\n    return sharedMediaTypes[0];\r\n  }\r\n\r\n  /**\r\n   * Searches for DICOM studies.\r\n   *\r\n   * @param {Object} options\r\n   * @param {Object} [options.queryParams] - HTTP query parameters\r\n   * @return {Object[]} Study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\r\n   */\r\n  searchForStudies(options = {}) {\r\n    debugLog('search for studies');\r\n    let withCredentials = false;\r\n    let url = `${this.qidoURL}/studies`;\r\n    if ('queryParams' in options) {\r\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\r\n    }\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Retrieves metadata for a DICOM study.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\r\n                      belonging to the study\r\n   */\r\n  retrieveStudyMetadata(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of study metadata',\r\n      );\r\n    }\r\n    debugLog(`retrieve metadata of study ${options.studyInstanceUID}`);\r\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/metadata`;\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Searches for DICOM series.\r\n   *\r\n   * @param {Object} options\r\n   * @param {Object} [options.studyInstanceUID] - Study Instance UID\r\n   * @param {Object} [options.queryParams] - HTTP query parameters\r\n   * @returns {Object[]} Series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\r\n   */\r\n  searchForSeries(options = {}) {\r\n    let url = this.qidoURL;\r\n    if ('studyInstanceUID' in options) {\r\n      debugLog(`search series of study ${options.studyInstanceUID}`);\r\n      url += `/studies/${options.studyInstanceUID}`;\r\n    }\r\n    url += '/series';\r\n    if ('queryParams' in options) {\r\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\r\n    }\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Retrieves metadata for a DICOM series.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\r\n                      belonging to the series\r\n   */\r\n  retrieveSeriesMetadata(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of series metadata',\r\n      );\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Series Instance UID is required for retrieval of series metadata',\r\n      );\r\n    }\r\n\r\n    debugLog(`retrieve metadata of series ${options.seriesInstanceUID}`);\r\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/metadata`;\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Searches for DICOM Instances.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} [options.studyInstanceUID] - Study Instance UID\r\n   * @param {String} [options.seriesInstanceUID] - Series Instance UID\r\n   * @param {Object} [options.queryParams] - HTTP query parameters\r\n   * @returns {Object[]} Instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\r\n   */\r\n  searchForInstances(options = {}) {\r\n    let url = this.qidoURL;\r\n    let withCredentials = false;\r\n    if ('studyInstanceUID' in options) {\r\n      url += `/studies/${options.studyInstanceUID}`;\r\n      if ('seriesInstanceUID' in options) {\r\n        debugLog(\r\n          `search for instances of series ${options.seriesInstanceUID}`,\r\n        );\r\n        url += `/series/${options.seriesInstanceUID}`;\r\n      } else {\r\n        debugLog(\r\n          `search for instances of study ${options.studyInstanceUID}`,\r\n        );\r\n      }\r\n    } else {\r\n      debugLog('search for instances');\r\n    }\r\n    url += '/instances';\r\n    if ('queryParams' in options) {\r\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\r\n    }\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\r\n  }\r\n\r\n  /** Returns a WADO-URI URL for an instance\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @returns {String} WADO-URI URL\r\n   */\r\n  buildInstanceWadoURIUrl(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error('Study Instance UID is required.');\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error('Series Instance UID is required.');\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error('SOP Instance UID is required.');\r\n    }\r\n\r\n    const contentType = options.contentType || MEDIATYPES.DICOM;\r\n    const transferSyntax = options.transferSyntax || '*';\r\n    const params = [];\r\n\r\n    params.push('requestType=WADO');\r\n    params.push(`studyUID=${options.studyInstanceUID}`);\r\n    params.push(`seriesUID=${options.seriesInstanceUID}`);\r\n    params.push(`objectUID=${options.sopInstanceUID}`);\r\n    params.push(`contentType=${contentType}`);\r\n    params.push(`transferSyntax=${transferSyntax}`);\r\n\r\n    const paramString = params.join('&');\r\n\r\n    return `${this.wadoURL}?${paramString}`;\r\n  }\r\n\r\n  /**\r\n   * Retrieves metadata for a DICOM Instance.\r\n   *\r\n   * @param {Object} options object\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @returns {Promise<InstanceMetadata>} metadata elements in DICOM JSON format\r\n   */\r\n  retrieveInstanceMetadata(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of instance metadata',\r\n      );\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Series Instance UID is required for retrieval of instance metadata',\r\n      );\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error(\r\n        'SOP Instance UID is required for retrieval of instance metadata',\r\n      );\r\n    }\r\n    debugLog(`retrieve metadata of instance ${options.sopInstanceUID}`);\r\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/metadata`;\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\r\n  }\r\n\r\n  /**\r\n   * Retrieves frames for a DICOM Instance.\r\n   * @param {Object} options options object\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\r\n   * @returns {Array} frame items as byte arrays of the pixel data element\r\n   */\r\n  retrieveInstanceFrames(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of instance frames',\r\n      );\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Series Instance UID is required for retrieval of instance frames',\r\n      );\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error(\r\n        'SOP Instance UID is required for retrieval of instance frames',\r\n      );\r\n    }\r\n    if (!('frameNumbers' in options)) {\r\n      throw new Error(\r\n        'frame numbers are required for retrieval of instance frames',\r\n      );\r\n    }\r\n    debugLog(\r\n      `retrieve frames ${options.frameNumbers.toString()} of instance ${\r\n        options.sopInstanceUID\r\n      }`,\r\n    );\r\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\r\n      options.seriesInstanceUID\r\n    }/instances/${\r\n      options.sopInstanceUID\r\n    }/frames/${options.frameNumbers.toString()}`;\r\n\r\n    const { mediaTypes } = options;\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n\r\n    let progressCallback = false;\r\n    if ('progressCallback' in options) {\r\n      progressCallback = options.progressCallback;\r\n    }\r\n\r\n    if (!mediaTypes) {\r\n      return this._httpGetMultipartApplicationOctetStream(\r\n        url,\r\n        false,\r\n        false,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    const sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\r\n    if (sharedMediaTypes.length > 1) {\r\n      /**\r\n       * Enable request of frames that are stored either compressed\r\n       * (image/* media type) or uncompressed (application/octet-stream\r\n       * media type).\r\n       */\r\n      const supportedMediaTypes = {\r\n        '1.2.840.10008.1.2.1': ['application/octet-stream'],\r\n        '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\r\n        '1.2.840.10008.1.2.4.50': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.51': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.57': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.70': ['image/jpeg'],\r\n        '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\r\n        '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\r\n        '1.2.840.10008.1.2.4.90': ['image/jp2'],\r\n        '1.2.840.10008.1.2.4.91': ['image/jp2'],\r\n        '1.2.840.10008.1.2.4.92': ['image/jpx'],\r\n        '1.2.840.10008.1.2.4.93': ['image/jpx'],\r\n        '1.2.840.10008.1.2.4.201': ['image/jhc'],\r\n        '1.2.840.10008.1.2.4.202': ['image/jhc'],\r\n      };\r\n\r\n      const headers = {\r\n        Accept: DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\r\n          mediaTypes,\r\n          supportedMediaTypes,\r\n        ),\r\n      };\r\n      return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n\r\n    if (commonMediaType.startsWith('application')) {\r\n      return this._httpGetMultipartApplicationOctetStream(\r\n        url,\r\n        mediaTypes,\r\n        false,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n    if (commonMediaType.startsWith('image')) {\r\n      return this._httpGetMultipartImage(\r\n        url,\r\n        mediaTypes,\r\n        false,\r\n        false,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n    if (commonMediaType.startsWith('video')) {\r\n      return this._httpGetMultipartVideo(\r\n        url,\r\n        mediaTypes,\r\n        false,\r\n        false,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported for retrieval of frames.`,\r\n    );\r\n  }\r\n\r\n /**\r\n * Element in mediaTypes parameter\r\n * @typedef {Object} MediaType\r\n * @param {String} [MediaType.mediaType] - ie 'image/jpeg', 'image/png'...\r\n */\r\n\r\n  /**\r\n   * Retrieves an individual, server-side rendered DICOM Instance.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\r\n   * @param {Object} [options.queryParams] - HTTP query parameters\r\n   * @returns {Promise<ArrayBuffer>} Rendered DICOM Instance\r\n   */\r\n  retrieveInstanceRendered(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of rendered instance',\r\n      );\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Series Instance UID is required for retrieval of rendered instance',\r\n      );\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error(\r\n        'SOP Instance UID is required for retrieval of rendered instance',\r\n      );\r\n    }\r\n\r\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/rendered`;\r\n\r\n    const { mediaTypes, queryParams } = options;\r\n    const headers = {};\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n\r\n    let progressCallback = false;\r\n    if ('progressCallback' in options) {\r\n      progressCallback = options.progressCallback;\r\n    }\r\n\r\n    if (!mediaTypes) {\r\n      const responseType = 'arraybuffer';\r\n      if (queryParams) {\r\n        url += DICOMwebClient._parseQueryParameters(queryParams);\r\n      }\r\n      return this._httpGet(\r\n        url,\r\n        headers,\r\n        responseType,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n    if (commonMediaType.startsWith('image')) {\r\n      return this._httpGetImage(\r\n        url,\r\n        mediaTypes,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n    if (commonMediaType.startsWith('video')) {\r\n      return this._httpGetVideo(\r\n        url,\r\n        mediaTypes,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n    if (commonMediaType.startsWith('text')) {\r\n      return this._httpGetText(\r\n        url,\r\n        mediaTypes,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n    if (commonMediaType === MEDIATYPES.PDF) {\r\n      return this._httpGetApplicationPdf(\r\n        url,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported ` +\r\n        'for retrieval of rendered instance.',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves a thumbnail of an DICOM Instance.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\r\n   * @param {Object} [options.queryParams] - HTTP query parameters\r\n   * @returns {ArrayBuffer} Thumbnail\r\n   */\r\n  retrieveInstanceThumbnail(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of rendered instance',\r\n      );\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Series Instance UID is required for retrieval of rendered instance',\r\n      );\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error(\r\n        'SOP Instance UID is required for retrieval of rendered instance',\r\n      );\r\n    }\r\n\r\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/thumbnail`;\r\n\r\n    const { mediaTypes, queryParams } = options;\r\n    const headers = {};\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n\r\n    let progressCallback = false;\r\n    if ('progressCallback' in options) {\r\n      progressCallback = options.progressCallback;\r\n    }\r\n\r\n    if (!mediaTypes) {\r\n      const responseType = 'arraybuffer';\r\n      if (queryParams) {\r\n        url += DICOMwebClient._parseQueryParameters(queryParams);\r\n      }\r\n      return this._httpGet(\r\n        url,\r\n        headers,\r\n        responseType,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n    if (commonMediaType.startsWith('image')) {\r\n      return this._httpGetImage(\r\n        url,\r\n        mediaTypes,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported ` +\r\n        'for retrieval of rendered instance.',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves rendered frames for a DICOM Instance.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\r\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\r\n   * @param {Object} [options.queryParams] - HTTP query parameters\r\n   * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\r\n   */\r\n  retrieveInstanceFramesRendered(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Series Instance UID is required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error(\r\n        'SOP Instance UID is required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n    if (!('frameNumbers' in options)) {\r\n      throw new Error(\r\n        'frame numbers are required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n\r\n    debugLog(\r\n      `retrieve rendered frames ${options.frameNumbers.toString()} of instance ${\r\n        options.sopInstanceUID\r\n      }`,\r\n    );\r\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\r\n      options.seriesInstanceUID\r\n    }/instances/${\r\n      options.sopInstanceUID\r\n    }/frames/${options.frameNumbers.toString()}/rendered`;\r\n\r\n    const { mediaTypes, queryParams } = options;\r\n    const headers = {};\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n    let progressCallback = false;\r\n    if ('progressCallback' in options) {\r\n      progressCallback = options.progressCallback;\r\n    }\r\n\r\n    if (!mediaTypes) {\r\n      const responseType = 'arraybuffer';\r\n      if (queryParams) {\r\n        url += DICOMwebClient._parseQueryParameters(queryParams);\r\n      }\r\n      return this._httpGet(url, headers, responseType, false, withCredentials);\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n    if (commonMediaType.startsWith('image')) {\r\n      return this._httpGetImage(\r\n        url,\r\n        mediaTypes,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n    if (commonMediaType.startsWith('video')) {\r\n      return this._httpGetVideo(\r\n        url,\r\n        mediaTypes,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported ` +\r\n        'for retrieval of rendered frame.',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves thumbnail of frames for a DICOM Instance.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\r\n   * @param {Object} [options.queryParams] - HTTP query parameters\r\n   * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\r\n   */\r\n  retrieveInstanceFramesThumbnail(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Study Instance UID is required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error(\r\n        'Series Instance UID is required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error(\r\n        'SOP Instance UID is required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n    if (!('frameNumbers' in options)) {\r\n      throw new Error(\r\n        'frame numbers are required for retrieval of rendered instance frames',\r\n      );\r\n    }\r\n\r\n    console.debug(\r\n      `retrieve rendered frames ${options.frameNumbers.toString()} of instance ${\r\n        options.sopInstanceUID\r\n      }`,\r\n    );\r\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\r\n      options.seriesInstanceUID\r\n    }/instances/${\r\n      options.sopInstanceUID\r\n    }/frames/${options.frameNumbers.toString()}/thumbnail`;\r\n\r\n    const { mediaTypes, queryParams } = options;\r\n    const headers = {};\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n\r\n    let progressCallback = false;\r\n    if ('progressCallback' in options) {\r\n      progressCallback = options.progressCallback;\r\n    }\r\n\r\n    if (!mediaTypes) {\r\n      const responseType = 'arraybuffer';\r\n      if (queryParams) {\r\n        url += DICOMwebClient._parseQueryParameters(queryParams);\r\n      }\r\n      return this._httpGet(\r\n        url,\r\n        headers,\r\n        responseType,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n    if (commonMediaType.startsWith('image')) {\r\n      return this._httpGetImage(\r\n        url,\r\n        mediaTypes,\r\n        queryParams,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported ` +\r\n        'for retrieval of rendered frame.',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves a DICOM Instance.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {String} options.sopInstanceUID - SOP Instance UID\r\n   * @returns {Promise<ArrayBuffer>} DICOM Part 10 file as Arraybuffer\r\n   */\r\n  retrieveInstance(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error('Study Instance UID is required');\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error('Series Instance UID is required');\r\n    }\r\n    if (!('sopInstanceUID' in options)) {\r\n      throw new Error('SOP Instance UID is required');\r\n    }\r\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}`;\r\n\r\n    const { mediaTypes } = options;\r\n    const { withCredentials = false } = options;\r\n    const { progressCallback = false } = options;\r\n\r\n    if (!mediaTypes) {\r\n      return this._httpGetMultipartApplicationDicom(\r\n        url,\r\n        false,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      ).then(getFirstResult);\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n    if (commonMediaType === MEDIATYPES.DICOM) {\r\n      return this._httpGetMultipartApplicationDicom(\r\n        url,\r\n        mediaTypes,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      ).then(getFirstResult);\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported for retrieval of instance.`,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves all DICOM Instances of a Series.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @param {String} options.seriesInstanceUID - Series Instance UID\r\n   * @param {Function} options.progressCallback\r\n   * @returns {Promise<ArrayBuffer[]>} DICOM Instances\r\n   */\r\n  retrieveSeries(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error('Study Instance UID is required');\r\n    }\r\n    if (!('seriesInstanceUID' in options)) {\r\n      throw new Error('Series Instance UID is required');\r\n    }\r\n\r\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}`;\r\n\r\n    const { mediaTypes } = options;\r\n    let withCredentials = false;\r\n    if ('withCredentials' in options) {\r\n      if (options.withCredentials) {\r\n        withCredentials = options.withCredentials;\r\n      }\r\n    }\r\n\r\n    let progressCallback = false;\r\n    if ('progressCallback' in options) {\r\n      progressCallback = options.progressCallback;\r\n    }\r\n\r\n    if (!mediaTypes) {\r\n      return this._httpGetMultipartApplicationDicom(\r\n        url,\r\n        false,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n    if (commonMediaType === MEDIATYPES.DICOM) {\r\n      return this._httpGetMultipartApplicationDicom(\r\n        url,\r\n        mediaTypes,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported for retrieval of series.`,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves all DICOM Instances of a Study.\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} options.studyInstanceUID - Study Instance UID\r\n   * @returns {ArrayBuffer[]} DICOM Instances\r\n   */\r\n  retrieveStudy(options) {\r\n    if (!('studyInstanceUID' in options)) {\r\n      throw new Error('Study Instance UID is required');\r\n    }\r\n\r\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}`;\r\n\r\n    const { mediaTypes } = options;\r\n    const { withCredentials = false } = options;\r\n    const { progressCallback = false } = options;\r\n\r\n    if (!mediaTypes) {\r\n      return this._httpGetMultipartApplicationDicom(\r\n        url,\r\n        false,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n    if (commonMediaType === MEDIATYPES.DICOM) {\r\n      return this._httpGetMultipartApplicationDicom(\r\n        url,\r\n        mediaTypes,\r\n        false,\r\n        progressCallback,\r\n        withCredentials,\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      `Media type ${commonMediaType} is not supported for retrieval of study.`,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves and parses BulkData from a BulkDataURI location.\r\n   * Decodes the multipart encoded data and returns the resulting data\r\n   * as an ArrayBuffer.\r\n   *\r\n   * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\r\n   *\r\n   * @param {Object} options\r\n   * @param {string} options.BulkDataURI to retrieve\r\n   * @param {Array}  options.mediaTypes to use to fetch the URI\r\n   * @param {string} options.byteRange to request a sub-range (only valid on single part)\r\n   * @returns {Promise<Array>} Bulkdata parts\r\n   */\r\n  retrieveBulkData(options) {\r\n    if (!('BulkDataURI' in options)) {\r\n      throw new Error('BulkDataURI is required.');\r\n    }\r\n\r\n    const url = options.BulkDataURI;\r\n    const { mediaTypes, byteRange } = options;\r\n    const { withCredentials = false } = options;\r\n    const { progressCallback = false } = options;\r\n\r\n    if (this.singlepart.indexOf('bulkdata') !== -1) {\r\n      return this._httpGet(url, options.headers, 'arraybuffer', null, withCredentials);\r\n    }\r\n\r\n    if (mediaTypes) {\r\n      try {\r\n        const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\r\n\r\n        if (commonMediaType==='image/') {\r\n          return this._httpGetMultipartImage(\r\n            url,\r\n            mediaTypes,\r\n            byteRange,\r\n            false,\r\n            false,\r\n            progressCallback,\r\n            withCredentials,\r\n          );\r\n        }\r\n      } catch(e) {\r\n        // No-op - this happens sometimes if trying to fetch the specific desired type but want to fallback to octet-stream\r\n      }\r\n    }\r\n\r\n    // Just use the media types provided\r\n    return this._httpGetMultipartApplicationOctetStream(\r\n      url,\r\n      mediaTypes,\r\n      byteRange,\r\n      false,\r\n      progressCallback,\r\n      withCredentials,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stores DICOM Instances.\r\n   *\r\n   * @param {Object} options\r\n   * @param {ArrayBuffer[]} options.datasets - DICOM Instances in PS3.10 format\r\n   * @param {String} [options.studyInstanceUID] - Study Instance UID\r\n   * @param {XMLHttpRequest} [options.request] - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\r\n   * @returns {Promise} Response message\r\n   */\r\n  storeInstances(options) {\r\n    if (!('datasets' in options)) {\r\n      throw new Error('datasets are required for storing');\r\n    }\r\n\r\n    let url = `${this.stowURL}/studies`;\r\n    if ('studyInstanceUID' in options) {\r\n      url += `/${options.studyInstanceUID}`;\r\n    }\r\n\r\n    const { data, boundary } = multipartEncode(options.datasets);\r\n    const headers = {\r\n      'Content-Type': `multipart/related; type=\"application/dicom\"; boundary=\"${boundary}\"`,\r\n    };\r\n    const { withCredentials = false } = options;\r\n    return this._httpPost(\r\n      url,\r\n      headers,\r\n      data,\r\n      options.progressCallback,\r\n      withCredentials,\r\n      options.request,\r\n    );\r\n  }\r\n\r\n  \r\n}\r\n\r\n\r\nexport { DICOMwebClient };\r\nexport default DICOMwebClient;\r\n","function findSubstring(str, before, after) {\r\n  const beforeIndex = str.lastIndexOf(before) + before.length;\r\n  if (beforeIndex < before.length) {\r\n    return null;\r\n  }\r\n  if (after !== undefined) {\r\n    const afterIndex = str.lastIndexOf(after);\r\n    if (afterIndex < 0) {\r\n      return null;\r\n    }\r\n    return str.substring(beforeIndex, afterIndex);\r\n  }\r\n  return str.substring(beforeIndex);\r\n}\r\n\r\nfunction getStudyInstanceUIDFromUri(uri) {\r\n  let uid = findSubstring(uri, 'studies/', '/series');\r\n  if (!uid) {\r\n    uid = findSubstring(uri, 'studies/');\r\n  }\r\n  if (!uid) {\r\n    console.debug(\r\n      `Study Instance UID could not be dertermined from URI \"${uri}\"`,\r\n    );\r\n  }\r\n  return uid;\r\n}\r\n\r\nfunction getSeriesInstanceUIDFromUri(uri) {\r\n  let uid = findSubstring(uri, 'series/', '/instances');\r\n  if (!uid) {\r\n    uid = findSubstring(uri, 'series/');\r\n  }\r\n  if (!uid) {\r\n    console.debug(\r\n      `Series Instance UID could not be dertermined from URI \"${uri}\"`,\r\n    );\r\n  }\r\n  return uid;\r\n}\r\n\r\nfunction getSOPInstanceUIDFromUri(uri) {\r\n  let uid = findSubstring(uri, '/instances/', '/frames');\r\n  if (!uid) {\r\n    uid = findSubstring(uri, '/instances/', '/metadata');\r\n  }\r\n  if (!uid) {\r\n    uid = findSubstring(uri, '/instances/');\r\n  }\r\n  if (!uid) {\r\n    console.debug(`SOP Instance UID could not be dertermined from URI\"${uri}\"`);\r\n  }\r\n  return uid;\r\n}\r\n\r\n\r\nfunction getFrameNumbersFromUri(uri) {\r\n  let numbers = findSubstring(uri, '/frames/', '/rendered');\r\n  if (!numbers) {\r\n    numbers = findSubstring(uri, '/frames/');\r\n  }\r\n  if (numbers === undefined) {\r\n    console.debug(`Frame Numbers could not be dertermined from URI\"${uri}\"`);\r\n  }\r\n  return numbers.split(',');\r\n}\r\n\r\nexport {\r\n  getStudyInstanceUIDFromUri,\r\n  getSeriesInstanceUIDFromUri,\r\n  getSOPInstanceUIDFromUri,\r\n  getFrameNumbersFromUri,\r\n};\r\n","export default '0.5.2';\r\n","import { DICOMwebClient } from './api.js';\r\nimport {\r\n  getStudyInstanceUIDFromUri,\r\n  getSeriesInstanceUIDFromUri,\r\n  getSOPInstanceUIDFromUri,\r\n  getFrameNumbersFromUri,\r\n} from './utils.js';\r\n\r\nconst api = {\r\n  DICOMwebClient,\r\n};\r\nconst utils = {\r\n  getStudyInstanceUIDFromUri,\r\n  getSeriesInstanceUIDFromUri,\r\n  getSOPInstanceUIDFromUri,\r\n  getFrameNumbersFromUri,\r\n};\r\n\r\nexport { default as version } from './version.js';\r\n\r\nexport { api, utils };\r\n"],"names":["uint8ArrayToString","arr","offset","arguments","length","undefined","limit","itemLimit","str","i","String","fromCharCode","stringToUint8Array","Uint8Array","j","charCodeAt","identifyBoundary","header","parts","split","substr","containsToken","message","token","index","findToken","maxSearchLength","searchLength","Math","min","guid","s4","floor","random","toString","substring","concat","multipartEncode","datasets","boundary","contentType","contentTypeString","footer","headerArray","footerArray","headerLength","footerLength","contentArrays","map","datasetBuffer","contentArray","contentLength","multipartArray","set","position","forEach","data","buffer","multipartDecode","response","ArrayBuffer","isView","separator","headerIndex","Error","boundaryString","boundaryLength","components","boundaryIndex","headerTokenIndex","spacingLength","slice","push","isObject","obj","_typeof","isEmptyObject","Object","keys","constructor","areValidRequestHooks","requestHooks","isValid","Array","isArray","every","requestHook","console","warn","getFirstResult","result","MEDIATYPES","DICOM","DICOM_JSON","OCTET_STREAM","PDF","JPEG","PNG","debugLog","DICOMwebClient","options","_classCallCheck","baseURL","url","error","username","password","qidoURLPrefix","qidoURL","wadoURLPrefix","wadoURL","stowURLPrefix","stowURL","singlepart","headers","errorInterceptor","verbose","setDebug","debug","_createClass","key","value","debugLevel","debugLogFunction","log","getDebug","setVerbose","getVerbose","_httpRequest","method","_this","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","setRequestHeader","userHeaders","onloadstart","onloadend","onreadystatechange","readyState","status","getResponseHeader","indexOf","progressCallback","onprogress","combinedHeaders","assign","metadata","pipeRequestHooks","functions","args","reduce","props","fn","pipedRequest","withCredentials","send","_httpGet","_httpGetApplicationJson","params","urlWithQueryParams","_parseQueryParameters","Accept","_httpGetApplicationPdf","_httpGetImage","mediaTypes","supportedMediaTypes","acceptHeaderFieldValue","_buildAcceptHeaderFieldValue","_httpGetText","_httpGetVideo","_httpGetMultipartImage","byteRange","rendered","Range","_buildRangeHeaderFieldValue","_buildMultipartAcceptHeaderFieldValue","_httpGetMultipartVideo","_httpGetMultipartApplicationDicom","defaultMediaType","acceptableMediaTypes","mediaType","_httpGetMultipartApplicationOctetStream","_toConsumableArray","values","_httpPost","_httpPostApplicationJson","searchForStudies","queryParams","retrieveStudyMetadata","studyInstanceUID","searchForSeries","retrieveSeriesMetadata","seriesInstanceUID","searchForInstances","buildInstanceWadoURIUrl","transferSyntax","sopInstanceUID","paramString","join","retrieveInstanceMetadata","retrieveInstanceFrames","frameNumbers","sharedMediaTypes","_getSharedMediaTypes","commonMediaType","_getCommonMediaType","startsWith","retrieveInstanceRendered","retrieveInstanceThumbnail","retrieveInstanceFramesRendered","retrieveInstanceFramesThumbnail","retrieveInstance","_options$withCredenti","_options$progressCall","then","retrieveSeries","retrieveStudy","_options$withCredenti2","_options$progressCall2","retrieveBulkData","BulkDataURI","_options$withCredenti3","_options$progressCall3","e","storeInstances","_multipartEncode","_options$withCredenti4","queryString","encodeURIComponent","_assertMediaTypeIsValid","sepIndex","mediaTypeType","types","includes","_parseMediaType","fieldValueParts","item","_this2","transferSyntaxUID","fieldValue","flat","endsWith","expectedMediaTypes","actualType","expectedMediaType","expectedType","haveSameType","JSON","stringify","Set","type","add","from","findSubstring","before","after","beforeIndex","lastIndexOf","afterIndex","getStudyInstanceUIDFromUri","uri","uid","getSeriesInstanceUIDFromUri","getSOPInstanceUIDFromUri","getFrameNumbersFromUri","numbers","api","utils"],"mappings":"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"}